@page "/"
@using Microsoft.AspNetCore.Mvc
@using Microsoft.EntityFrameworkCore
@using Models
@using Extensions
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage protectedSessionStore
@inject DB db
@inject NavigationManager navigationManager
<PageTitle>Main</PageTitle>
<div class="text-center">
    <div class="m-auto" style="max-width:500px;">
        @if (IsStart && Mode == "試験")
        {
            <div class="card">
                @if (IsExamFinish && IsStart)
                {
                    <p class="text-center h1 text-danger">Finish!</p>
                }
                else
                {
                    <p class="text-center h1 text-success">@Time.ToString(@"mm\:ss")</p>
                }
            </div>
        }
        else
        {
            <div class="input-group">
                <span class="input-group-text col-4">モード</span>
                <select class="form-select" @onchange="ModeSpinnerSelectChanged" disabled="@IsSpinner">
                    @foreach (var item in ModeList)
                    {
                        <option>@item</option>
                    }
                </select>
            </div>
            <div class="input-group">
                <span class="input-group-text col-4">レベル</span>
                <select class="form-select" @onchange="LevelSpinnerSelectChanged" disabled="@IsSpinner">
                    @foreach (var item in LevelList)
                    {
                        <option>@item.Name</option>
                    }
                </select>
            </div>
            <div class="input-group">
                <span class="input-group-text col-4">品詞</span>
                <select class="form-select" @onchange="PartOfSpeechSpinnerSelectChanged" disabled="@IsSpinner">
                    @foreach (var item in PartOfSpeechList)
                    {
                        <option>@item.InJapanese</option>
                    }
                </select>
            </div>
            @if (IsSpinner)
            {
                <div class="spinner-border text-info m-4"></div>
            }
            else
            {
                if (IsStart == false && Mode == "試験")
                {
                    <button type="button" class="btn btn-outline-primary form-control" @onclick="StartExam">試験開始!</button>
                }
            }
        }
        @if (IsFinish && Mode != "試験")
        {
            <div class="row m-1">
                <p class="text-success h1">All done!</p>
                <button type="button" class="btn btn-primary" @onclick="ReturnTopButtonOnClick">Return top</button>
            </div>
        }
        else
        {
            @if (!IsSpinner)
            {
                @if (IsStart || Mode != "試験")
                {
                    <p class="text-center h1 card p-3">@Question.Word.Word1</p>
                    <p class="text-center text-info">@(Questions.Count == 0 ? 0 : index + 1) of @Questions.Count</p>
                    <div>
                        @foreach (var item in Question.Answers)
                        {
                            <button type="button" class="btn btn-outline-secondary form-control" @onclick="(e) => AnswerButtonOnClick(item)" disabled="@IsExamFinish">@item</button>
                        }
                    </div>
                }
                @if (IsValid == true)
                {
                    <div class="alert alert-success">
                        <h4 class="alert-heading">Correct!</h4>
                        <p>この単語の意味</p>
                        <hr>
                        @foreach (var item in Question.Word.Vocabularies)
                        {
                            <div class="row">
                                <div class="col">@item.PartOfSpeech.InJapanese</div>
                                <div class="col">@item.Meaning</div>
                            </div>
                        }
                    </div>
                    <div class="d-grid gap-2">
                        <button type="button" class="btn btn-outline-success" @onclick="NextButtonOnClick">Next</button>
                    </div>
                }
                else if (IsValid == false)
                {
                    <div class="alert alert-danger">
                        <h4 class="alert-heading">Incorrect!</h4>
                    </div>
                }
                @if (IsExamFinish)
                {
                    <button type="button" class="btn-outline-primary form-control" @onclick="GoExamResult">結果を見る</button>
                }
            }
        }
    </div>
</div>
@code {
    private bool? IsValid;
    private List<Word> WordList = new();
    private Question Question = new();
    private List<Question> Questions = new();
    private int index;
    private bool IsFinish = false;

    private string[] ModeList = { "練習", "試験" };
    private List<Level> LevelList = new();
    private List<PartOfSpeech> PartOfSpeechList = new();

    private string Mode = "";
    private string Level = "";
    private string PartOfSpeech = "";

    private bool IsStart = false;
    private bool IsExamFinish = false;
    private System.Timers.Timer Timer;
    private TimeSpan Time = TimeSpan.FromMinutes(5);
    private List<Models.Result> ResultList = new();

    private bool IsSpinner = false;

    protected override async Task OnInitializedAsync()
    {
        IsSpinner = true;
        await Task.Run(() => Refresh());
        Timer = new System.Timers.Timer(1000);
        Timer.Elapsed += (s, e) =>
        {
            InvokeAsync(() =>
        {
            Time = Time.Subtract(TimeSpan.FromSeconds(1));
            if (Time == TimeSpan.Zero)
            {
                IsExamFinish = true;
            }
            StateHasChanged();
        });
        };
        IsSpinner = false;
    }
    public void Refresh()
    {
        IsStart = false;
        ResultList = new();
        IsValid = null;
        index = 0;
        PartOfSpeechList = db.PartOfSpeeches.ToList();
        LevelList = db.Levels.ToList();
        if (string.IsNullOrEmpty(PartOfSpeech))
            PartOfSpeech = PartOfSpeechList.First().Name;
        if (string.IsNullOrEmpty(Level))
            Level = LevelList.First().Name;
        Questions = db.Vocabularies.Include(a => a.Word).Include(a => a.PartOfSpeech).Where(a => a.PartOfSpeech.Name == PartOfSpeech && a.Level.Name == Level).ToList().Select(a => new Question
            {
                Word = new Word
                {
                    Id = a.Word.Id,
                    Word1 = a.Word.Word1,
                    Vocabularies = db.Vocabularies.Where(b => b.PartOfSpeech.Name == PartOfSpeech && b.Level.Name == Level && b.WordId == a.WordId).Select(b => new Vocabulary
                    {
                        Id = b.Id,
                        Meaning = b.Meaning,
                        PartOfSpeech = new PartOfSpeech
                        {
                            Id = b.PartOfSpeech.Id,
                            Name = b.PartOfSpeech.Name,
                            InJapanese = b.PartOfSpeech.InJapanese
                        },
                        WordId = b.WordId,
                        PartOfSpeechId = b.PartOfSpeechId
                    }).ToList()
                },
                Answers = CreateAnswer(a)
            }).CreateRandom().ToList();
        if (Mode == "試験")
        {
            Questions = Questions.Take(25).ToList();
            ResultList.AddRange(Questions.Select(a => new Models.Result
                {
                    Word = a.Word,
                    IsCorrect = null
                }));
        }
        if (Questions.Count <= index)
        {
            Question = new Question
                {
                    Answers = new List<string>(),
                    Word = new Word
                    {
                        Vocabularies = new List<Vocabulary>()
                    }
                };
        }
        else
        {
            Question = Questions[index];
        }
    }

    private List<string> CreateAnswer(Vocabulary vocabulary)
    {
        List<string> tmp = new List<string>();
        tmp.Add(vocabulary.Meaning);
        db.Vocabularies.Where(a => !db.Vocabularies.Where(b => b.WordId == vocabulary.WordId).Select(b => b.Meaning).Contains(a.Meaning) && a.PartOfSpeech.Name == PartOfSpeech).CreateRandom().Select(a => a.Meaning).Distinct().Take(3).ToList().ForEach(a => tmp.Add(a));
        return tmp.CreateRandom().ToList();
    }

    private async Task PartOfSpeechSpinnerSelectChanged(ChangeEventArgs e)
    {
        IsSpinner = true;
        PartOfSpeech = db.PartOfSpeeches.First(a => a.InJapanese == (string)e.Value).Name;
        await Task.Run(() =>
        {
            Refresh();
        });
        IsSpinner = false;
    }

    private async Task ModeSpinnerSelectChanged(ChangeEventArgs e)
    {
        IsSpinner = true;
        Mode = (string)e.Value;
        await Task.Run(() => Refresh());
        IsSpinner = false;
    }

    private async Task LevelSpinnerSelectChanged(ChangeEventArgs e)
    {
        IsSpinner = true;
        Level = (string)e.Value;
        await Task.Run(() => Refresh());
        IsSpinner = false;
    }

    public async Task AnswerButtonOnClick(string answer)
    {
        IsSpinner = true;
        IsValid = Question.Word.Vocabularies.Where(a => a.PartOfSpeech.Name == PartOfSpeech).Select(a => a.Meaning).Contains(answer);
        if (Mode == "試験")
        {
            var result = ResultList[index];
            result.Answer = answer;
            result.IsCorrect = IsValid;
            await protectedSessionStore.SetAsync("Result", JsonConvert.SerializeObject(ResultList));
            IsValid = true;
            await NextButtonOnClick();
        }
        IsSpinner = false;
    }

    private async Task NextButtonOnClick()
    {
        IsSpinner = true;
        await Task.Run(() =>
        {
            IsValid = null;
            index++;
            if (Questions.Count <= index)
            {
                IsFinish = true;
                IsExamFinish = true;
            }
            else
            {
                Question = Questions[index];
            }
        });
        IsSpinner = false;
    }

    private void ReturnTopButtonOnClick()
    {
#if DEBUG
    navigationManager.NavigateTo("/EnglishMasterStage", true);
#else
        navigationManager.NavigateTo("/EnglishMaster", true);
#endif
    }

    private void StartExam()
    {
        IsStart = true;
        Timer.Start();
        Timer.Enabled = true;
    }

    private void GoExamResult()
    {
        navigationManager.NavigateTo("./Result");
    }
}
